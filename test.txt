   Compiling currency-converter v0.1.0 (/home/anubix/Documents/CODE/world-currency-converter)
error[E0412]: cannot find type `ServiceResponse` in this scope
   --> src/handlers.rs:278:74
    |
278 |     async fn setup_test_app() -> impl Service<ServiceRequest, Response = ServiceResponse<BoxBody>, Error = actix_web::Error> {
    |                                                                          ^^^^^^^^^^^^^^^
    |
   ::: /home/anubix/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/service.rs:75:1
    |
75  | pub struct ServiceRequest {
    | ------------------------- similarly named struct `ServiceRequest` defined here
    |
help: a struct with a similar name exists
    |
278 |     async fn setup_test_app() -> impl Service<ServiceRequest, Response = ServiceRequest<BoxBody>, Error = actix_web::Error> {
    |                                                                          ~~~~~~~~~~~~~~
help: consider importing this struct
    |
263 +     use actix_web::dev::ServiceResponse;
    |

error[E0412]: cannot find type `BoxBody` in this scope
   --> src/handlers.rs:278:90
    |
278 |     async fn setup_test_app() -> impl Service<ServiceRequest, Response = ServiceResponse<BoxBody>, Error = actix_web::Error> {
    |                                                                                          ^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
263 +     use actix_web::body::BoxBody;
    |

error[E0119]: conflicting implementations of trait `Default` for type `mocks::MockHttpClient`
   --> src/lib.rs:94:18
    |
94  |         #[derive(Default)]
    |                  ^^^^^^^ conflicting implementation for `mocks::MockHttpClient`
    |
   ::: src/handlers.rs:272:5
    |
272 |     impl Default for MockHttpClient {
    |     ------------------------------- first implementation here
    |
    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `impl actix_web::dev::Service<actix_http::requests::request::Request, Response = ServiceResponse, Error = actix_web::Error>: actix_web::dev::Service<ServiceRequest>` is not satisfied
   --> src/handlers.rs:278:126
    |
278 |       async fn setup_test_app() -> impl Service<ServiceRequest, Response = ServiceResponse<BoxBody>, Error = actix_web::Error> {
    |  ______________________________________________________________________________________________________________________________^
279 | |         INIT.call_once(|| {
280 | |             std::env::set_var("RUST_LOG", "debug");
281 | |             env_logger::try_init().ok();
...   |
294 | |         ).await
295 | |     }
    | |_____^ the trait `actix_web::dev::Service<ServiceRequest>` is not implemented for `impl actix_web::dev::Service<actix_http::requests::request::Request, Response = ServiceResponse, Error = actix_web::Error>`
    |
    = help: the following other types implement trait `actix_web::dev::Service<Req>`:
              <actix_service::and_then::AndThenService<A, B, Req> as actix_web::dev::Service<Req>>
              <actix_service::apply::Apply<S, F, Req, In, Res, Err> as actix_web::dev::Service<Req>>
              <actix_web::app_service::AppInitService<T, B> as actix_web::dev::Service<actix_http::requests::request::Request>>
              <actix_web::app_service::AppRouting as actix_web::dev::Service<ServiceRequest>>
              <Box<S> as actix_web::dev::Service<Req>>
              <actix_service::fn_service::FnService<F, Fut, Req, Res, Err> as actix_web::dev::Service<Req>>
              <actix_service::fn_service::FnServiceFactory<F, Fut, Req, Res, Err, ()> as actix_web::dev::Service<Req>>
              <actix_service::map::Map<A, F, Req, Res> as actix_web::dev::Service<Req>>
            and 32 others

error[E0277]: the trait bound `impl actix_web::dev::Service<actix_http::requests::request::Request, Response = ServiceResponse, Error = actix_web::Error>: actix_web::dev::Service<ServiceRequest>` is not satisfied
   --> src/handlers.rs:278:34
    |
278 |     async fn setup_test_app() -> impl Service<ServiceRequest, Response = ServiceResponse<BoxBody>, Error = actix_web::Error> {
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `actix_web::dev::Service<ServiceRequest>` is not implemented for `impl actix_web::dev::Service<actix_http::requests::request::Request, Response = ServiceResponse, Error = actix_web::Error>`
    |
    = help: the following other types implement trait `actix_web::dev::Service<Req>`:
              <actix_service::and_then::AndThenService<A, B, Req> as actix_web::dev::Service<Req>>
              <actix_service::apply::Apply<S, F, Req, In, Res, Err> as actix_web::dev::Service<Req>>
              <actix_web::app_service::AppInitService<T, B> as actix_web::dev::Service<actix_http::requests::request::Request>>
              <actix_web::app_service::AppRouting as actix_web::dev::Service<ServiceRequest>>
              <Box<S> as actix_web::dev::Service<Req>>
              <actix_service::fn_service::FnService<F, Fut, Req, Res, Err> as actix_web::dev::Service<Req>>
              <actix_service::fn_service::FnServiceFactory<F, Fut, Req, Res, Err, ()> as actix_web::dev::Service<Req>>
              <actix_service::map::Map<A, F, Req, Res> as actix_web::dev::Service<Req>>
            and 32 others

warning: variable does not need to be mutable
   --> src/lib.rs:104:21
    |
104 |                 let mut currencies = match country_name {
    |                     ----^^^^^^^^^^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

Some errors have detailed explanations: E0119, E0277, E0412.
For more information about an error, try `rustc --explain E0119`.
warning: `currency-converter` (lib test) generated 1 warning (1 duplicate)
error: could not compile `currency-converter` (lib test) due to 5 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `currency-converter` (lib) generated 1 warning (run `cargo fix --lib -p currency-converter` to apply 1 suggestion)
